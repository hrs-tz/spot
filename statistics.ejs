<!DOCTYPE html>
<html lang="en">
<!-- head -->
<%- include('./partials/head.ejs') %>
<body>
    
    <!-- navigation -->
    <%- include('./partials/nav.ejs') %> 

    <!-- content -->
    <div>
        <div class="tab" style="width:100%">
            <button class="tablinks" onclick="openmodal(event, 'Visits per POI type')"id="defaultOpen">Visits per POI type</button>
            <button class="tablinks" onclick="openmodal(event, 'Dangerous visits per POI type')">Dangerous visits per POI type</button>
            <button class="tablinks" onclick="openmodal(event, 'Daily report')">Daily report</button>
            <button class="tablinks" onclick="openmodal(event, 'Hourly report')" style="width:100%">Hourly report</button>
          </div>
        
        <!-- diagram: column chart 1 -->
        <div id="Visits per POI type" class="tabcontent">
            <p class="tag">Visits per POI type:</p>
            <div>
            <canvas id="columnChart1"></canvas>
        </div>
    </div>
    <div id="Dangerous visits per POI type" class="tabcontent">
        <p class="tag">Dangerous visits per POI type:</p>
        <div>
            <canvas id="columnChart2"></canvas>
        </div>
    </div>
    <div id="Daily report" class="tabcontent">
        <p class="tag">Daily report:</p>
        <!-- diagram: line chart 1 -->
        <label for="date-selection-start">From:</label>
        <input type="date" id="date-selection-start" onchange="postStartDate(event);" value= "<%= startDate %>" max="<%= currentDate %>">
        <label for="date-selection-end">To:</label>
        <input type="date" id="date-selection-end" onchange="postEndDate(event);" value= "<%= currentDate %>">
        <div>
            <canvas id="lineChart1"></canvas>
        </div>
    </div>

        <div id="Hourly report" class="tabcontent">
            <p class="tag">Hourly report:</p>
            <!-- diagram: line chart 2 -->
        <input type="date" id="date-selection" onchange="postDate(event);" value= "<%= currentDate %>">
        <div>
            <canvas id="lineChart2"></canvas>
        </div>
    </div>
</div>
    <p class="tag">Total number of visits:</p>
        <p class="info total-visits"></p>
        <p class="tag">Total number of positive cases reported:</p>
        <p class="info total-cases"></p>
        <p class="tag">Total number of visits made by positive cases:</p>
        <p class="info visits-of-positives"></p>
        </div>

    <!-- footer -->
    <%- include('./partials/footer.ejs') %>

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

</body>
</html>

<script>
    // change post to populate-statistics => διαχωρισμός των στατιστικών που επιστρέφονται ανα είδος!!
    async function postDate(event) {
        dateSelection.value = event.target.value;

        // request statistics data
        const res = await fetch('/populate-statistics', {
            method: 'POST',
            body: JSON.stringify({ from: startDate, to: endDate, selectedDate: dateSelection.value }),
            headers: {'Content-Type': 'application/json' }
        });
        const data = await res.json();

        lineChart2Data.visits = fillZeroHours(data.results.visitsPerHour);
        lineChart2Data.dangerousVisits = fillZeroHours(data.results.dangerousVisitsPerHour);

        lineChart2.data.datasets[0].data = lineChart2Data.visits;
        lineChart2.data.datasets[1].data = lineChart2Data.dangerousVisits;
        lineChart2.update();
    }

    async function postStartDate(event) {
        startDateSelection.value = event.target.value;
        startDate = startDateSelection.value;

        // request statistics data
        const res = await fetch('/populate-statistics', {
            method: 'POST',
            body: JSON.stringify({ from: startDate, to: endDate, selectedDate: dateSelection.value }),
            headers: {'Content-Type': 'application/json' }
        });
        const data = await res.json();

        // fill zero visits
        lineChart1Data.visits = fillZeroDates(startDate, endDate, data.results.visitsPerDay);
        lineChart1Data.dangerousVisits = fillZeroDates(startDate, endDate, data.results.dangerousVisitsPerDay);

        lineChart1.data.datasets[0].data = lineChart1Data.visits;
        lineChart1.data.datasets[1].data = lineChart1Data.dangerousVisits;
        lineChart1.update();
    }

    async function postEndDate(event) {
        endDateSelection.value = event.target.value;
        endDate = endDateSelection.value;

        // request statistics data
        const res = await fetch('/populate-statistics', {
            method: 'POST',
            body: JSON.stringify({ from: startDate, to: endDate, selectedDate: dateSelection.value }),
            headers: {'Content-Type': 'application/json' }
        });
        const data = await res.json();

        // fill zero visits
        lineChart1Data.visits = fillZeroDates(startDate, endDate, data.results.visitsPerDay);
        lineChart1Data.dangerousVisits = fillZeroDates(startDate, endDate, data.results.dangerousVisitsPerDay);

        lineChart1.data.datasets[0].data = lineChart1Data.visits;
        lineChart1.data.datasets[1].data = lineChart1Data.dangerousVisits;
        lineChart1.update();
    }

    function fillZeroDates(startDate, endDate, data) {
        let index=0;
            let tempDate = new Date(startDate + 'T00:00:00.777+00:00');
            let endDateDateFormat = new Date(endDate + 'T00:00:00.777+00:00');
            let filledData = [];

            while (tempDate <= endDateDateFormat) {
                let item = { totalVisits: 0, date: '' };
                if (index < data.length) {
                    if(data[index].date === tempDate.toISOString().split('T')[0]) { 
                        item.date = data[index].date;
                        item.totalVisits = data[index].totalVisits;
                        filledData.push(item);
                        index++;
                    }
                    else {
                    item.totalVisits = 0;
                    item.date = tempDate.toISOString().split('T')[0];
                    filledData.push(item);
                    }
                }
                else {
                    item.totalVisits = 0;
                    item.date = tempDate.toISOString().split('T')[0];
                    filledData.push(item);
                }
            
            tempDate.setDate(tempDate.getDate() + 1);
        }
        
        return filledData;
    }

    function fillZeroHours(data) {
        let index=0;
        let hour = 0;
        let filledData = [];

        while (hour <= 23) {
            let item = { totalVisits: 0, date: '' };
            if (index < data.length) {
                if(data[index].date == hour) { 
                    item.date = data[index].date;
                    item.totalVisits = data[index].totalVisits;
                    filledData.push(item);
                    index++;
                }
                else {
                item.totalVisits = 0;
                item.date = hour + '';
                filledData.push(item);
                }
            }
            else {
                item.totalVisits = 0;
                item.date = hour + '';
                filledData.push(item);
            }
        
            hour++;
        }

        return filledData;
    }

    const totalNumberOfVisits = document.querySelector('.total-visits');
    const totalNumberOfCases = document.querySelector('.total-cases');
    const totalNumberOfVisitsOfPositives = document.querySelector('.visits-of-positives');
    const dateSelection = document.getElementById('date-selection');
    const startDateSelection = document.getElementById('date-selection-start');
    const endDateSelection = document.getElementById('date-selection-end');

    // chart data initializations
    let columnChart1Data = [];
    let columnChart2Data = [];
    let lineChart2Data1 = [];
    let lineChart2Data2 = [];
    let lineChart1Data = { visits: [], dangerousVisits: [] };
    let lineChart2Data = { visits: [], dangerousVisits: [] };

    // get time frame from user's input
    let startDate = startDateSelection.value;
    let endDate = endDateSelection.value;

    let lineChart1 = '';
    let lineChart2 = '';

    // function to populate charts with data from db
    async function populateStatistics() {
        try {

            // request statistics data
            const res = await fetch('/populate-statistics', {
              method: 'POST',
              body: JSON.stringify({ from: startDate, to: endDate, selectedDate: dateSelection.value }),
              headers: {'Content-Type': 'application/json' }
            });
            const data = await res.json();
            
            // get data
            totalNumberOfVisits.textContent = data.results.totalVisits; // total visits
            totalNumberOfCases.textContent = data.results.totalCases; // total positive cases
            totalNumberOfVisitsOfPositives.textContent = data.results.visitsOfPositives; // total visits by positive cases
            columnChart1Data = data.results.visitsPerType;
            columnChart2Data = data.results.dangerousVisitsPerType;

            // fill zero visits
            lineChart1Data.visits = fillZeroDates(startDate, endDate, data.results.visitsPerDay);
            lineChart1Data.dangerousVisits = fillZeroDates(startDate, endDate, data.results.dangerousVisitsPerDay);
            lineChart2Data.visits = fillZeroHours(data.results.visitsPerHour);
            lineChart2Data.dangerousVisits = fillZeroHours(data.results.dangerousVisitsPerHour);

            // column chart 1
            const columnChartData1 = {
                datasets: [{
                    label: 'Visits',
                    backgroundColor: 'rgb(255, 99, 132)',
                    borderColor: 'rgb(255, 99, 132)',
                    data: columnChart1Data,
                }]
            };

            const configColumnChart1 = {
                type: 'bar',
                data: columnChartData1,
                options: {
                    responsive: true,
                    plugins: {
                    legend: {
                        position: 'top',
                    },
                    title: {
                        display: true,
                        text: 'Visits per POI type'
                    }
                    },
                    parsing: {
                        xAxisKey: 'poiInfo',
                        yAxisKey: 'totalVisits'
                    }
                }
            };

            const columnChart1 = new Chart(
                document.getElementById('columnChart1'),
                configColumnChart1
            );

            // column chart 2
            const columnChartData2 = {
                datasets: [{
                    label: 'Visits',
                    backgroundColor: 'rgb(255, 99, 132)',
                    borderColor: 'rgb(255, 99, 132)',
                    data: columnChart2Data,
                }]
            };

            const configColumnChart2 = {
                type: 'bar',
                data: columnChartData2,
                options: {
                    responsive: true,
                    plugins: {
                    legend: {
                        position: 'top',
                    },
                    title: {
                        display: true,
                        text: 'Visits by positive cases per POI type'
                    }
                    },
                    parsing: {
                        xAxisKey: 'poiInfo',
                        yAxisKey: 'totalVisits'
                    }
                }
            };

            const columnChart2 = new Chart(
                document.getElementById('columnChart2'),
                configColumnChart2
            );

            // line chart 1
            const lineChartData1 = {
                datasets: [
                    {
                        label: 'Visits',
                        data: lineChart1Data.visits,
                        backgroundColor: 'rgb(255, 99, 132)',
                        borderColor: 'rgb(255, 99, 132)',
                    },
                    {
                        label: 'Visits by positive cases',
                        data: lineChart1Data.dangerousVisits,
                        backgroundColor: 'rgb(200, 88, 152)',
                        borderColor: 'rgb(200, 88, 152)',
                    }
                ]
            };
            
            const configLineChart1 = {
                type: 'line',
                data: lineChartData1,
                options: {
                    responsive: true,
                    plugins: {
                    legend: {
                        position: 'top',
                    },
                    title: {
                        display: true,
                        text: 'Daily report'
                    }
                    },
                    parsing: {
                        xAxisKey: 'date',
                        yAxisKey: 'totalVisits'
                    }
                },
            };

            lineChart1 = new Chart(
                document.getElementById('lineChart1'),
                configLineChart1
            );

            // line chart 2
            const lineChartData2 = {
                datasets: [
                    {
                        label: 'Visits',
                        data: lineChart2Data.visits,
                        backgroundColor: 'rgb(255, 99, 132)',
                        borderColor: 'rgb(255, 99, 132)',
                    },
                    {
                        label: 'Visits by positive cases',
                        data: lineChart2Data.dangerousVisits,
                        backgroundColor: 'rgb(200, 88, 152)',
                        borderColor: 'rgb(200, 88, 152)',
                    }
                ]
            };
            
            const configLineChart2 = {
                type: 'line',
                data: lineChartData2,
                options: {
                    responsive: true,
                    plugins: {
                    legend: {
                        position: 'top',
                    },
                    title: {
                        display: true,
                        text: 'Hourly report'
                    }
                    },
                    parsing: {
                        xAxisKey: 'date',
                        yAxisKey: 'totalVisits'
                    }
                },
            };

            lineChart2 = new Chart(
                document.getElementById('lineChart2'),
                configLineChart2
            );
        }
        catch (err) {
            console.log(err);
        }
    }

    populateStatistics();

</script>
<script>
    function openmodal(evt, modalName) {
      var i, tabcontent, tablinks;
      tabcontent = document.getElementsByClassName("tabcontent");
      for (i = 0; i < tabcontent.length; i++) {
        tabcontent[i].style.display = "none";
      }
      tablinks = document.getElementsByClassName("tablinks");
      for (i = 0; i < tablinks.length; i++) {
        tablinks[i].className = tablinks[i].className.replace(" active", "");
      }
      document.getElementById(modalName).style.display = "block";
      evt.currentTarget.className += " active";
    }
    document.getElementById("defaultOpen").click();
    </script>