<!DOCTYPE html>
<html lang="en">
<!-- head -->
<%- include('./partials/head.ejs') %>
<body class="d-flex flex-column min-vh-100">
    
    <!-- navigation -->
    <%- include('./partials/nav.ejs') %> 

    <!-- content -->
    <section>
        <div class="container-lg">
            <div>
                <p class="lead mb-0 pb-0">Welcome admin!</p>
                <p class="text-muted">System is up and running. Check system statistics below.</p>
            </div>
            <!-- grid -->
            <!-- 1st row -->
            <div class="row justify-content-evenly align-items-center my-4">
                <div class="col-lg-5">
                    <img src="/public//img/commute-illustration.svg" alt="dashboard illustration" class="img-fluid">
                </div>
                <div class="col-lg-5">
                    <!-- nested grid -->
                    <div class="container-lg">
                        <div class="row my-4">
                            <div class="col-6">
                                <!-- card: visits -->
                                <div class="card border-0 bg-primary text-light placeholder-glow" style="height: 100%;">
                                    <div class="card-body text-center py-4 placeholder" id="visits">
                                        <p class="card-title">Number of visits</p>
                                        <h4 class="card-text info total-visits">-</h4>
                                    </div>
                                </div>
                                <!-- card: visits -->
                            </div>
                            <div class="col-6">
                                <!-- card: positive cases -->
                                <div class="card border-0 bg-warning text-light placeholder-glow" style="height: 100%;">
                                    <div class="card-body text-center py-4 placeholder" id="cases">
                                        <p class="card-title">Number of positive cases</p>
                                        <h4 class="card-text info total-cases">-</h4>
                                    </div>
                                </div>
                                <!-- card: positive cases -->
                            </div>
                        </div>
                        <div class="row my-4">
                            <div class="col-6">
                                <!-- card: dangerous visits -->
                                <div class="card border-0 bg-accent text-light placeholder-glow" style="height: 100%;">
                                    <div class="card-body text-center py-4 placeholder" id="dangerous-visits">
                                        <p class="card-title">Number of dangerous visits</p>
                                        <h4 class="card-text info visits-of-positives">-</h4>
                                    </div>
                                </div>
                                <!-- card: dangerous visits -->
                            </div>
                            <div class="col-6">
                                <!-- card -->
                                <div class="card border-0 bg-info text-light placeholder-glow" style="height: 100%;">
                                    <div class="card-body text-center py-4 placeholder" id="users">
                                        <p class="card-title">Number of users</p>
                                        <h4 class="card-text info total-users">-</h4>
                                    </div>
                                </div>
                                <!-- card -->
                            </div>
                        </div>
                    </div>
                    <!-- nested grid -->
                </div>
            </div>
            <!-- 1st row -->
            <!-- 2nd row -->
            <div class="row justify-content-center align-items-stretch my-4">
                <div class="col-lg-6 pb-4 pb-lg-0">
                    <!-- card: diagram visits per type -->
                    <div class="card border-0 bg-light text-light placeholder-glow" style="height: 100%;">
                        <div class="card-body py-4 placeholder" id="visits-per-poi-type">
                            <p class="tag card-title text-dark"><i class="bi bi-bar-chart-line-fill"></i> Visits per POI type</p>
                            <p class="tag card-text text-muted">The total number of visits made by users per point of interest type</p>
                            <!-- diagram: column chart 1 -->
                            <div class="card-text">
                                <canvas id="columnChart1"></canvas>
                            </div>
                        </div>
                    </div>
                    <!-- card: diagram visits per type -->
                </div>
                <div class="col-lg-6">
                    <!-- card: diagram dangerous visits per type -->
                    <div class="card border-0 bg-light text-light placeholder-glow" style="height: 100%;">
                        <div class="card-body py-4 placeholder" id="dangerous-visits-per-poi-type">
                            <p class="tag card-title text-dark"><i class="bi bi-bar-chart-line-fill"></i> Dangerous visits per POI type</p>
                            <p class="tag card-text text-muted">The total number of visits made by positive cases per point of interest type</p>
                            <!-- diagram: column chart 2 -->
                            <div class="card-text">
                                <canvas id="columnChart2"></canvas>
                            </div>
                        </div>
                    </div>
                    <!-- card: diagram dangerous visits per type -->
                </div>
            </div>
            <!-- 2nd row -->
            <!-- 3rd row -->
            <div class="row justify-content-center align-items-stretch my-4">
                <div class="col-lg-6 pb-4">
                    <!-- card: diagram daily report -->
                    <div class="card border-0 bg-light text-light placeholder-glow" style="height: 100%;">
                        <div class="card-body py-4 placeholder" id="daily-report">
                            <p class="tag card-title text-dark"><i class="bi bi-graph-up"></i> Report</p>
                            <p class="tag card-text text-muted">The total number of visits per day. Select a range of dates below to get the report for these days</p>
                            <!-- diagram: line chart 1 -->
                            <label for="date-selection-start" class="text-muted">From:</label>
                            <input type="date" id="date-selection-start" onchange="postStartDate(event);" value= "<%= startDate %>" max="<%= currentDate %>">
                            <label for="date-selection-end" class="text-muted">To:</label>
                            <input type="date" id="date-selection-end" onchange="postEndDate(event);" value= "<%= currentDate %>">
                            <div class="card-text">
                                <canvas id="lineChart1"></canvas>
                            </div>
                        </div>
                    </div>
                    <!-- card: diagram daily report -->
                </div>
                <div class="col-lg-6 pb-4">
                    <!-- card: diagram hourly report -->
                    <div class="card border-0 bg-light text-light placeholder-glow" style="height: 100%;">
                        <div class="card-body py-4 placeholder" id="hourly-report">
                            <p class="tag card-title text-dark"><i class="bi bi-graph-up"></i> Daily report</p>
                            <p class="tag card-text text-muted">The total number of visits per hour. Select a date below to get the daily report</p>
                            <!-- diagram: line chart 2 -->
                            <input type="date" id="date-selection" onchange="postDate(event);" value= "<%= currentDate %>">
                            <div class="card-text">
                                <canvas id="lineChart2"></canvas>
                            </div>
                        </div>
                    </div>
                    <!-- card: diagram hourly report -->
                </div>
            </div>
            <!-- 3rd row -->
            <!-- grid -->
        </div>
    </section>

    <!-- footer -->
    <%- include('./partials/footer.ejs') %>

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

</body>
</html>

<script>
    // event handler for line chart 2 update
    async function postDate(event) {
        dateSelection.value = event.target.value;
        // trigger loading effect
        hourlyReport.classList.add("placeholder");

        try {
            // request statistics data
            const res = await fetch('/populate-chart-per-hour', {
                method: 'POST',
                body: JSON.stringify({ selectedDate: dateSelection.value }),
                headers: {'Content-Type': 'application/json' }
            });
            const data = await res.json();

            lineChart2Data.visits = fillZeroHours(data.results.visitsPerHour);
            lineChart2Data.dangerousVisits = fillZeroHours(data.results.dangerousVisitsPerHour);

            lineChart2.data.datasets[0].data = lineChart2Data.visits;
            lineChart2.data.datasets[1].data = lineChart2Data.dangerousVisits;
            lineChart2.update();
            // stop loading effect
            hourlyReport.classList.remove("placeholder");
        }
        catch (err) {
            console.log(err);
        }
    }

    // event handler for line chart 1 update (start date changed)
    async function postStartDate(event) {
        startDateSelection.value = event.target.value;
        startDate = startDateSelection.value;
        // trigger loading effect
        dailyReport.classList.add("placeholder");

        try {
            // request statistics data
            const res = await fetch('/populate-chart-per-day', {
                method: 'POST',
                body: JSON.stringify({ from: startDate, to: endDate }),
                headers: {'Content-Type': 'application/json' }
            });
            const data = await res.json();

            // fill zero visits
            lineChart1Data.visits = fillZeroDates(startDate, endDate, data.results.visitsPerDay);
            lineChart1Data.dangerousVisits = fillZeroDates(startDate, endDate, data.results.dangerousVisitsPerDay);

            lineChart1.data.datasets[0].data = lineChart1Data.visits;
            lineChart1.data.datasets[1].data = lineChart1Data.dangerousVisits;
            lineChart1.update();
            // stop loading effect
            dailyReport.classList.remove("placeholder");
        } 
        catch (err) {
            console.log(err);
        }
    }

    // event handler for line chart 1 update (end date changed)
    async function postEndDate(event) {
        endDateSelection.value = event.target.value;
        endDate = endDateSelection.value;
        // trigger loading effect
        dailyReport.classList.add("placeholder");

        // request statistics data
        const res = await fetch('/populate-chart-per-day', {
            method: 'POST',
            body: JSON.stringify({ from: startDate, to: endDate }),
            headers: {'Content-Type': 'application/json' }
        });
        const data = await res.json();

        // fill zero visits
        lineChart1Data.visits = fillZeroDates(startDate, endDate, data.results.visitsPerDay);
        lineChart1Data.dangerousVisits = fillZeroDates(startDate, endDate, data.results.dangerousVisitsPerDay);

        lineChart1.data.datasets[0].data = lineChart1Data.visits;
        lineChart1.data.datasets[1].data = lineChart1Data.dangerousVisits;
        lineChart1.update();
        // stop loading effect
        dailyReport.classList.remove("placeholder");
    }

    // function to fill empty dates with zero visits
    function fillZeroDates(startDate, endDate, data) {
        let index=0;
        let tempDate = new Date(startDate + 'T00:00:00.777+00:00');
        let endDateDateFormat = new Date(endDate + 'T00:00:00.777+00:00');
        let filledData = [];

        // loop through given time box
        while (tempDate <= endDateDateFormat) {
            let item = { totalVisits: 0, date: '' };
            // check for remaining visit records
            if (index < data.length) {
                if(data[index].date === tempDate.toISOString().split('T')[0]) { 
                    item.date = data[index].date;
                    item.totalVisits = data[index].totalVisits;
                    filledData.push(item);
                    index++;
                }
                else {
                item.totalVisits = 0;
                item.date = tempDate.toISOString().split('T')[0];
                filledData.push(item);
                }
            }
            // no more visit records
            else {
                item.totalVisits = 0;
                item.date = tempDate.toISOString().split('T')[0];
                filledData.push(item);
            }
            
            tempDate.setDate(tempDate.getDate() + 1);
        }
        
        return filledData;
    }

    // function to fill empty hours with zero visits
    function fillZeroHours(data) {
        let index=0;
        let hour = 0;
        let filledData = [];

        // loop through hours of given date
        while (hour <= 23) {
            let item = { totalVisits: 0, date: '' };
            // check for remaining visit records
            if (index < data.length) {
                if(data[index].date == hour) { 
                    item.date = data[index].date;
                    item.totalVisits = data[index].totalVisits;
                    filledData.push(item);
                    index++;
                }
                else {
                item.totalVisits = 0;
                item.date = hour + '';
                filledData.push(item);
                }
            }
            // no more visit records
            else {
                item.totalVisits = 0;
                item.date = hour + '';
                filledData.push(item);
            }
        
            hour++;
        }

        return filledData;
    }

    const totalNumberOfVisits = document.querySelector('.total-visits');
    const totalNumberOfCases = document.querySelector('.total-cases');
    const totalNumberOfVisitsOfPositives = document.querySelector('.visits-of-positives');
    const totalNumberOfUsers = document.querySelector('.total-users')
    const dateSelection = document.getElementById('date-selection');
    const startDateSelection = document.getElementById('date-selection-start');
    const endDateSelection = document.getElementById('date-selection-end');
    // selectors for placeholders
    const visitsCardBody = document.getElementById("visits");
    const casesCardBody = document.getElementById("cases");
    const dangerousVisitsCardBody = document.getElementById("dangerous-visits");
    const usersCardBody = document.getElementById("users");
    const visitsPerPoiTypeCardBody = document.getElementById("visits-per-poi-type");
    const dangerousVisitsPerPoiTypeCardBody = document.getElementById("dangerous-visits-per-poi-type");
    const dailyReport = document.getElementById("daily-report");
    const hourlyReport = document.getElementById("hourly-report");

    // chart data initializations
    let columnChart1Data = [];
    let columnChart2Data = [];
    let lineChart2Data1 = [];
    let lineChart2Data2 = [];
    let lineChart1Data = { visits: [], dangerousVisits: [] };
    let lineChart2Data = { visits: [], dangerousVisits: [] };

    // get time frame from user's input
    let startDate = startDateSelection.value;
    let endDate = endDateSelection.value;

    let lineChart1 = '';
    let lineChart2 = '';

    // function to populate charts with data from db
    async function populateStatistics() {
        try {

            // request statistics data
            const res = await fetch('/populate-statistics');
            const data = await res.json();
            
            // get data
            totalNumberOfVisits.textContent = data.results.totalVisits; // total visits
            totalNumberOfCases.textContent = data.results.totalCases; // total positive cases
            totalNumberOfVisitsOfPositives.textContent = data.results.visitsOfPositives; // total visits by positive cases
            totalNumberOfUsers.textContent = data.results.totalUsers; // total users
            columnChart1Data = data.results.visitsPerType;
            columnChart2Data = data.results.dangerousVisitsPerType;
            
            // stop loading effect
            visitsCardBody.classList.remove("placeholder");
            casesCardBody.classList.remove("placeholder");
            dangerousVisitsCardBody.classList.remove("placeholder");
            usersCardBody.classList.remove("placeholder");

            // request data for line charts
            const resPerDay = await fetch('/populate-chart-per-day', {
                method: 'POST',
                body: JSON.stringify({ from: startDate, to: endDate }),
                headers: {'Content-Type': 'application/json' }
            });
            const dataPerDay = await resPerDay.json();

            const resPerHour = await fetch('/populate-chart-per-hour', {
                method: 'POST',
                body: JSON.stringify({ selectedDate: dateSelection.value }),
                headers: {'Content-Type': 'application/json' }
            });
            const dataPerHour = await resPerHour.json();

            // fill zero visits
            lineChart1Data.visits = fillZeroDates(startDate, endDate, dataPerDay.results.visitsPerDay);
            lineChart1Data.dangerousVisits = fillZeroDates(startDate, endDate, dataPerDay.results.dangerousVisitsPerDay);
            lineChart2Data.visits = fillZeroHours(dataPerHour.results.visitsPerHour);
            lineChart2Data.dangerousVisits = fillZeroHours(dataPerHour.results.dangerousVisitsPerHour);

            // column chart 1
            const columnChartData1 = {
                datasets: [{
                    label: 'Visits',
                    backgroundColor: '#ea6060b4',
                    borderColor: '#EA6060',
                    borderWidth: 2,
                    borderRadius: 2,
                    borderSkipped: false,
                    data: columnChart1Data,
                }]
            };

            const configColumnChart1 = {
                type: 'bar',
                data: columnChartData1,
                options: {
                    responsive: true,
                    plugins: {
                    legend: {
                        position: 'top',
                    },
                    title: {
                        display: true,
                        text: 'Visits per POI type'
                    }
                    },
                    parsing: {
                        xAxisKey: 'poiInfo',
                        yAxisKey: 'totalVisits'
                    }
                }
            };

            const columnChart1 = new Chart(
                document.getElementById('columnChart1'),
                configColumnChart1
            );

            // stop loading effect
            visitsPerPoiTypeCardBody.classList.remove("placeholder");

            // column chart 2
            const columnChartData2 = {
                datasets: [{
                    label: 'Visits',
                    backgroundColor: '#ea6060b4',
                    borderColor: '#EA6060',
                    borderWidth: 2,
                    borderRadius: 2,
                    borderSkipped: false,
                    data: columnChart2Data,
                }]
            };

            const configColumnChart2 = {
                type: 'bar',
                data: columnChartData2,
                options: {
                    responsive: true,
                    plugins: {
                    legend: {
                        position: 'top',
                    },
                    title: {
                        display: true,
                        text: 'Visits by positive cases per POI type'
                    }
                    },
                    parsing: {
                        xAxisKey: 'poiInfo',
                        yAxisKey: 'totalVisits'
                    }
                }
            };

            const columnChart2 = new Chart(
                document.getElementById('columnChart2'),
                configColumnChart2
            );

            // stop loading effect
            dangerousVisitsPerPoiTypeCardBody.classList.remove("placeholder");

            // line chart 1
            const lineChartData1 = {
                datasets: [
                    {
                        label: 'Visits',
                        data: lineChart1Data.visits,
                        backgroundColor: '#0dcaf0a9',
                        borderColor: '#0dcaf0',
                        borderWidth: 2,
                        borderRadius: 2,
                        borderSkipped: false,
                    },
                    {
                        label: 'Visits by positive cases',
                        data: lineChart1Data.dangerousVisits,
                        backgroundColor: '#ea6060b4',
                        borderColor: '#EA6060',
                        borderWidth: 2,
                        borderRadius: 2,
                        borderSkipped: false,
                    }
                ]
            };
            
            const configLineChart1 = {
                type: 'line',
                data: lineChartData1,
                options: {
                    responsive: true,
                    plugins: {
                    legend: {
                        position: 'top',
                    },
                    title: {
                        display: true,
                        text: 'Daily report'
                    }
                    },
                    parsing: {
                        xAxisKey: 'date',
                        yAxisKey: 'totalVisits'
                    }
                },
            };

            lineChart1 = new Chart(
                document.getElementById('lineChart1'),
                configLineChart1
            );

            // stop loading effect
            dailyReport.classList.remove("placeholder");

            // line chart 2
            const lineChartData2 = {
                datasets: [
                    {
                        label: 'Visits',
                        data: lineChart2Data.visits,
                        backgroundColor: '#0dcaf0a9',
                        borderColor: '#0dcaf0',
                        borderWidth: 2,
                        borderRadius: 2,
                        borderSkipped: false,
                    },
                    {
                        label: 'Visits by positive cases',
                        data: lineChart2Data.dangerousVisits,
                        backgroundColor: '#ea6060b4',
                        borderColor: '#EA6060',
                        borderWidth: 2,
                        borderRadius: 2,
                        borderSkipped: false,
                    }
                ]
            };
            
            const configLineChart2 = {
                type: 'line',
                data: lineChartData2,
                options: {
                    responsive: true,
                    plugins: {
                    legend: {
                        position: 'top',
                    },
                    title: {
                        display: true,
                        text: 'Hourly report'
                    }
                    },
                    parsing: {
                        xAxisKey: 'date',
                        yAxisKey: 'totalVisits'
                    }
                },
            };

            lineChart2 = new Chart(
                document.getElementById('lineChart2'),
                configLineChart2
            );

            // stop loading effect
            hourlyReport.classList.remove("placeholder");
        }
        catch (err) {
            console.log(err);
        }
    }

    populateStatistics();

</script>